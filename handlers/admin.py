from aiogram import types
from misc import dp, bot
import sqlite3
from aiogram.utils.exceptions import BotBlocked, ChatNotFound
import asyncio

from aiogram.dispatcher import FSMContext
from .sqlit import info_members,add_black,cheak_black,get_stat,get_channel_info, change_infopay

from .sqlit import reg_utm_support, cheak_support, changee_support
from .sqlit import regviplata, cheak_viplats,changee_support_tochka

from aiogram.dispatcher.filters.state import State, StatesGroup


ADMIN_ID_1 = 494588959 #C–∞–Ω—è
ADMIN_ID_2 = 44520977 #–ö–æ–ª—è
ADMIN_ID_3 = 941730379 #–î–∂–µ–π—Å–æ–Ω
ADMIN_ID_4 = 678623761 # –ë–µ–∫–∏—Ä


ADMIN_ID =[ADMIN_ID_1,ADMIN_ID_2,ADMIN_ID_3,ADMIN_ID_4,1079844264,807911349]

text_stop = """–ê—è—è–π —è —Å–º–æ—Ç—Ä—é, –∫—Ç–æ-—Ç–æ —Ä–µ—à–∏–ª
–ø–æ—à–∞–ª–∏—Ç—å üòè

–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ, –∞ –ø–æ—Ç–æ–º –Ω–∞–∂–∏–º–∞–πüôèüôÉ"""

class reg1(StatesGroup):
    name1 = State()
    fname1 = State()


class reg_support(StatesGroup):
    step1 = State()
    step2 = State()
    step3 = State()


class del_support(StatesGroup):
    step1 = State()
    step2 = State()
    step3 = State()

class partners12(StatesGroup):
    step1 = State()
    step2 = State()
    pye_change_step = State()

class st_reg(StatesGroup):
    st_name = State()
    st_fname = State()
    step_q = State()
    step_regbutton = State()

class black_dodik(StatesGroup):
    name1 = State()
    fname1 = State()

@dp.message_handler(commands=['admin'],state='*')
async def admin_ka(message: types.Message,state: FSMContext):
    await state.finish()
    id = message.from_user.id
    if id in ADMIN_ID:
        markup = types.InlineKeyboardMarkup()
        bat_a = types.InlineKeyboardButton(text='–¢—Ä–∞—Ñ–∏–∫', callback_data='list_members')
        bat_c = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='write_message')
        bat_b = types.InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å –±–∞–∑—É', callback_data='baza')
        bat_setin = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='settings')

        bat_vie_support = types.InlineKeyboardButton(text='üëÅ–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∞–ø–ø–æ—Ä—Ç–æ–≤', callback_data='bat_vie_support')
        bat_pye_support = types.InlineKeyboardButton(text='üí∞–í—ã–ø–ª–∞—Ç–∏—Ç—å —Å–∞–ø–ø–æ—Ä—Ç–∞–º', callback_data='bat_pye_support')

        markup.add(bat_a,bat_c,bat_b)

        markup.add(bat_vie_support)
        markup.add(bat_pye_support)

        markup.add(bat_setin)

        data = get_channel_info()
        for d in data:
            markup.add(types.InlineKeyboardButton(text=f"{d[0]} üëàüèª —É–¥–∞–ª–∏—Ç—å", callback_data=f'ch_{d[2]}'))


        await bot.send_message(message.chat.id,'–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å',reply_markup=markup)



@dp.callback_query_handler(text='bat_vie_support')  # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Support
async def bat_vie_support(call: types.callback_query):
    if call.message.chat.id in ADMIN_ID:
        answer = cheak_support()
        await bot.send_message(chat_id=call.message.chat.id, text='‚≠êÔ∏è–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∞–ø–ø–æ—Ä—Ç–∞–ºüëá', parse_mode='html')

        for i in answer:
            markup = types.InlineKeyboardMarkup()
            try:
                bat_a = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–µ–∑–∏—Ç—ã', callback_data=f'change_payinfo{i[0]}')
                markup.add(bat_a)
                bat_b = types.InlineKeyboardButton(text='–û–±–Ω—É–ª–∏—Ç—å —ç—Ç–æ–≥–æ —á–µ–ª–∞',callback_data=f'toch_obnal_{i[0]}')  # –£–î–ê–õ–ï–ù–ò–ï –ß–ï–õ–ê
                markup.add(bat_b)
            except:
                pass

            try:
                int(i[1])
                print(i)
                await bot.send_message(chat_id=call.message.chat.id, text=f'<b>–ö–∞–Ω–∞–ª:</b> {i[0]}\n'
                                                                          f'<b>–ê–¥–º–∏–Ω:</b> tg://user?id={i[1]}\n'
                                                                          f'<b>–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫:</b> {i[3]}\n'
                                                                          f'<b>–¢—Ä–∞—Ñ–∏–∫–∞ –≤—Å–µ–≥–æ:</b> {i[2]}\n'
                                                                          f'<b>–†–µ–∫–≤–µ–∑–∏—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞:</b> {i[4]}',
                                       parse_mode='html', reply_markup=markup)
            except:
                await bot.send_message(chat_id=call.message.chat.id, text=f'<b>–ö–∞–Ω–∞–ª:</b> {i[0]}\n'
                                                                          f'<b>–ê–¥–º–∏–Ω:</b> {i[1]}\n'
                                                                          f'<b>–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫:</b> {i[3]}\n'
                                                                          f'<b>–¢—Ä–∞—Ñ–∏–∫–∞ –≤—Å–µ–≥–æ:</b> {i[2]}\n'
                                                                          f'<b>–†–µ–∫–≤–µ–∑–∏—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞:</b> {i[4]}',
                                       parse_mode='html', reply_markup=markup)
            await asyncio.sleep(0.3)
    await bot.answer_callback_query(call.id)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–µ–∑–∏—Ç–æ–≤ —É –∫–∞–Ω–∞–ª–∞
@dp.callback_query_handler(text_startswith='change_payinfo')  # –û–±—Ä–∞–±–æ—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ–∫–≤–µ–∑–∏—Ç–æ–≤ —É —Å–∞–ø–ø–æ—Ä—Ç–æ–≤
async def change_payinfo(call: types.callback_query, state: FSMContext):
    if call.message.chat.id in ADMIN_ID:
        channel = call.data[14:]  # –ò–º—è –∫–∞–Ω–∞–ª–∞, –≥–¥–µ –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–µ–∑–∏—Ç—ã
        await state.update_data(channel=channel)
        await bot.send_message(call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞!')

        await partners12.pye_change_step.set()
    await bot.answer_callback_query(call.id)


@dp.message_handler(state=partners12.pye_change_step, content_types='text')
async def get_pyeinfo_support(message: types.Message, state: FSMContext):
    if message.chat.id in ADMIN_ID:
        newinfo = message.text
        d = await state.get_data()
        channel = d['channel']
        change_infopay(channel, newinfo)
        try:
            newinfo = message.text
            d = await state.get_data()
            channel = d['channel']
            change_infopay(channel, newinfo)
            await bot.send_message(message.chat.id, text='–£—Å–ø–µ—à–Ω–æ!')

        except:
            await bot.send_message(message.chat.id, text='–ù–µ—É–¥–∞—á–∞')

        await state.finish()

@dp.callback_query_handler(text_startswith='toch_obnal_')  # –¢–æ—á–µ—á–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ
async def fdsfdsfsdfds(call: types.callback_query, state: FSMContext):
    try:
        channel = (call.data[11:])
        changee_support_tochka(channel)  # –û–±–Ω—É–ª—è–µ–º —á–µ–ª–∞ —Å –∫–∞–Ω–∞–ª–æ–º channel
        await call.message.answer(text=f'–û–±–Ω—É–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ {channel} –£—Å–ø–µ—à–Ω–æ')
    except:
        await call.message.answer(text='–¢–æ—á–µ—á–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å')
    await bot.answer_callback_query(call.id)




@dp.callback_query_handler(text='bat_reg_support')  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Support
async def bat_reg_support(call: types.callback_query):
    if call.message.chat.id in ADMIN_ID:
        await bot.send_message(chat_id=call.message.chat.id,
                               text='–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –°–∞–ø–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @name_channel')
        await reg_support.step1.set()
    await bot.answer_callback_query(call.id)


@dp.message_handler(state=reg_support.step1, content_types='text')
async def get_reg_support(message: types.Message, state: FSMContext):
    if message.chat.id in ADMIN_ID:
        try:
            await state.update_data(channel=message.text)
            await bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ (–Æ–∑–µ—Ä - –ò–º—è)')
            await reg_support.step2.set()  # –°–û–°–¢–û–Ø–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û–ë –ê–î–ú–ò–ù–ï
        except:
            await bot.send_message(chat_id=message.chat.id, text='–ù–µ—É–¥–∞—á–∞')
            await state.finish()


@dp.message_handler(state=reg_support.step2, content_types='text')
async def get_reg_support2(message: types.Message, state: FSMContext):
    if message.chat.id in ADMIN_ID:
        try:
            await state.update_data(user_name=message.text)
            await bot.send_message(chat_id=message.chat.id,
                                   text='–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ä–µ–∫–≤–µ–∑–∏—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ–≥–æ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã')
            await reg_support.step3.set()
        except:
            await bot.send_message(chat_id=message.chat.id, text='–ù–µ—É–¥–∞—á–∞')
            await state.finish()


@dp.message_handler(state=reg_support.step3, content_types='text')
async def get_reg_support33(message: types.Message, state: FSMContext):
    if message.chat.id in ADMIN_ID:
        number_support = message.text  # –†–µ–∫–≤–µ–∑–∏—Ç—ã —Å–∞–ø–ø–æ—Ä—Ç–∞

        info_about_parthers = await state.get_data()
        channel_support = info_about_parthers['channel']  # –ö–∞–Ω–∞–ª
        username_support = info_about_parthers['user_name']  # –Æ–∑–µ—Ä–Ω–µ–π–º —Å–∞–ø–ø–æ—Ä—Ç–æ–≤

        try:
            reg_utm_support(utm=channel_support, info=username_support, pay_info=number_support)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            reg_one_channel(channel_support)
            await bot.send_message(message.chat.id, text='–£—Å–ø–µ—à–Ω–æ')
        except:
            await bot.send_message(message.chat.id, text='–ù–µ—É–¥–∞—á–∞!')

        await state.finish()


# –í–´–ü–õ–ê–¢–ê –°–ê–ü–ü–û–†–¢–ê–ú
@dp.callback_query_handler(text='bat_pye_support')  # –í—ã–ø–ª–∞—Ç–∞ –ø—Ä–∞—Ç–Ω–µ—Ä–∞–º
async def bat_pye_support(call: types.callback_query):
    if call.message.chat.id in ADMIN_ID:
        markup = types.InlineKeyboardMarkup()
        but_pye_yes = types.InlineKeyboardButton(text='‚úÖ–î–ê', callback_data='but_pye_yes')
        but_pye_no = types.InlineKeyboardButton(text='‚ùå–ù–ï–¢', callback_data='but_pye_no')

        markup.add(but_pye_yes, but_pye_no)

        await bot.send_message(chat_id=call.message.chat.id,
                               text='<b>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∞–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å —É –≤—Å–µ—Ö —Å–∞–ø–ø–æ—Ä—Ç–æ–≤ —Å—á–µ—Ç—á–∏–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞?</b>',
                               reply_markup=markup, parse_mode='html')
    await bot.answer_callback_query(call.id)


@dp.callback_query_handler(text='but_pye_no')  # –û–¢–ú–ï–ù–ê –í—ã–ø–ª–∞—Ç—ã –ø—Ä–∞—Ç–Ω–µ—Ä–∞–º
async def bat_pye_no_support(call: types.callback_query):
    if call.message.chat.id in ADMIN_ID:
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await bot.answer_callback_query(call.id)













@dp.callback_query_handler(text='statistika')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –¢–†–ê–§–ò–ö–ê
async def cheack_statistika(call: types.callback_query):
    t = """https://t.me/InfobizSprintBot?start=–Æ–¢–ú_–ú–ï–¢–ö–ê\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞–º:</b>\n\n"""
    evn = get_stat()
    print(evn)

    for e in evn:
        t+= f"""<a href = 'tg://user?id={e[0]}'>{e[0]}</a> - {e[1]}\n"""

    await call.message.answer(t)



@dp.callback_query_handler(text='list_members')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –¢–†–ê–§–ò–ö–ê
async def cheack_trafik(call: types.callback_query):
    if call.message.chat.id in ADMIN_ID:
        a = (info_members()) #–ö–û–õ–ò–ß–ï–°–¢–í–û –í–°–ï–• –ß–ï–õ–û–í
        await bot.send_message(call.message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {a[0]}\n'
                                                     f'–§–∏–Ω–∏—à–∏—Ä—Ä–æ–≤–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {a[1]}')
    await bot.answer_callback_query(call.id)

@dp.callback_query_handler(text='baza')
async def baza(call: types.callback_query):
    if call.message.chat.id in ADMIN_ID:
        a = open('server.db','rb')
        await bot.send_document(chat_id=call.message.chat.id, document=a)
    await bot.answer_callback_query(call.id)

########################  –†–∞—Å—Å—ã–ª–∫–∞  ################################
@dp.callback_query_handler(text='write_message')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def check(call: types.callback_query, state: FSMContext):
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–í—Å–µ–π –±–∞–∑–µ', callback_data='rasl_old')
    bat1 = types.InlineKeyboardButton(text='–î–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞', callback_data='rasl_all')
    bat2 = types.InlineKeyboardButton(text='–ù–µ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞', callback_data='rasl_finish')
    murkap.add(bat0)
    murkap.add(bat1)
    murkap.add(bat2)

    await bot.send_message(call.message.chat.id, '–ö–æ–º—É –¥–µ–ª–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É?', reply_markup = murkap)
    await bot.answer_callback_query(call.id)



@dp.callback_query_handler(text_startswith='rasl_')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def check(call: types.callback_query, state: FSMContext):
    if call.data == 'rasl_old':
        await state.update_data(rasl = 'rasl_old')
    elif call.data == 'rasl_all':
        await state.update_data(rasl = 'rasl_all')
    elif call.data[0:11] == 'rasl_groop_':
        await state.update_data(rasl = call.data[11:])
    elif call.data == 'rasl_finish':
        await state.update_data(rasl='rasl_finish')


    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    murkap.add(bat0)
    await bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º',
                           reply_markup=murkap)
    await st_reg.step_q.set()
    await bot.answer_callback_query(call.id)


@dp.callback_query_handler(text='otemena', state='*')
async def otmena_12(call: types.callback_query, state: FSMContext):
    await bot.send_message(call.message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ')
    await state.finish()
    await bot.answer_callback_query(call.id)


@dp.message_handler(state=st_reg.step_q,content_types=['text', 'photo', 'video', 'video_note', 'voice'])  # –ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
async def redarkt_post(message: types.Message, state: FSMContext):
    await st_reg.st_name.set()
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
    bat2 = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏', callback_data='add_but')
    murkap.add(bat1)
    murkap.add(bat2)
    murkap.add(bat0)

    await message.copy_to(chat_id=message.chat.id)
    q = message
    await state.update_data(q=q)

    await bot.send_message(chat_id=message.chat.id, text='–ü–æ—Å—Ç —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ üëÜ', reply_markup=murkap)


# –ù–ê–°–¢–†–û–ô–ö–ê –ö–ù–û–ü–û–ö
@dp.callback_query_handler(text='add_but', state=st_reg.st_name)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
async def addbutton(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Controller Bot')
    await st_reg.step_regbutton.set()
    await bot.answer_callback_query(call.id)


@dp.message_handler(state=st_reg.step_regbutton, content_types=['text'])  # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –Ω–µ—Ñ–æ—Ä–º–∞—Ç–µ
async def redarkt_button(message: types.Message, state: FSMContext):
    arr3 = message.text.split('\n')
    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    massiv_text = []
    massiv_url = []

    for but in arr3:
        new_but = but.split('-')
        massiv_text.append(new_but[0][:-1])
        massiv_url.append(new_but[1][1:])
        bat9 = types.InlineKeyboardButton(text=new_but[0][:-1], url=new_but[1][1:])
        murkap.add(bat9)

    try:
        data = await state.get_data()
        mess = data['q']  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

        await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id, message_id=mess.message_id,
                               reply_markup=murkap)

        await state.update_data(text_but=massiv_text)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞
        await state.update_data(url_but=massiv_url)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞

        murkap2 = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –º–µ–Ω—é
        bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
        bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
        murkap2.add(bat1)
        murkap2.add(bat0)

        await bot.send_message(chat_id=message.chat.id, text='–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫‚òù', reply_markup=murkap2)


    except:
        await bot.send_message(chat_id=message.chat.id, text='–û—à–∏–±–∫–∞. –û—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()


# –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò –ö–ù–û–ü–û–ö


@dp.callback_query_handler(text='send_ras', state="*")  # –†–∞—Å—Å—ã–ª–∫–∞
async def fname_step(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    data = await state.get_data()
    mess = data['q']  # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    rasl = data['rasl']  # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:  # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç—É –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤—É –ø—É—Å—Ç–æ–π
        text_massiv = data['text_but']
        url_massiv = data['url_but']
        for t in text_massiv:
            for u in url_massiv:
                bat = types.InlineKeyboardButton(text=t, url=u)
                murkap.add(bat)
                break

    except:
        pass

    if rasl == 'rasl_old':
        db = sqlite3.connect('server.db') #–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–π –±–∞–∑–µ
        sql = db.cursor()
        users = sql.execute("SELECT id FROM user_time").fetchall()

    elif rasl == 'rasl_all':
        db = sqlite3.connect('server.db')  # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ç–µ–º –∫—Ç–æ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≥—Ä–µ–≤
        sql = db.cursor()
        users = sql.execute("SELECT id FROM user_time WHERE finish_stat = '1'").fetchall()

    elif rasl == 'rasl_finish':
        db = sqlite3.connect('server.db')  # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ç–µ–º –∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≥—Ä–µ–≤
        sql = db.cursor()
        users = sql.execute("SELECT id FROM user_time WHERE finish_stat = '0'").fetchall()


    await state.finish()
    bad = 0
    good = 0
    delit = 0
    await bot.send_message(call.message.chat.id,
                           f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(users)}</code></b>\n\n<b>–†–∞—Å—Å–ª—ã–∫–∞ –Ω–∞—á–∞—Ç–∞!</b>",
                           parse_mode="html")

    for i in users:
        await asyncio.sleep(0.03)
        try:
            await mess.copy_to(i[0], reply_markup=murkap)
            good += 1
        except (BotBlocked, ChatNotFound):
            try:
                #delite_user(i[0])
                delit += 1

            except:
                pass
        except:
            bad += 1


    await bot.send_message(
        call.message.chat.id,
        "<u>–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n\n</u>"
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{len(users)}</code>\n"
        f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{good}</code>\n"
        f"<b>–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{delit}</code>\n"
        f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–æ–∫:</b> <code>{bad}</code>",
        parse_mode="html"
    )
    await bot.answer_callback_query(call.id)
#########################################################